{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","nameInputId","nanoid","numberInputId","ContactForm","addContact","useState","name","setName","number","setNumber","inputHandler","e","target","value","reset","className","s","onSubmit","preventDefault","htmlFor","id","type","pattern","title","required","onChange","ContactList","deleteContact","filteredContacts","map","element","button","onClick","filterId","Filter","updateFilter","filter","label","input","message","App","contacts","setContacts","setFilter","useEffect","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","check","find","contact","alert","prevState","normalizedFilter","toLocaleLowerCase","includes","filterContacts","updatedContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.badeceb5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact-form\":\"ContactForm_contact-form__3jXKB\",\"name-label\":\"ContactForm_name-label__2ns-g\",\"number-label\":\"ContactForm_number-label__1r4Qc\",\"number-input\":\"ContactForm_number-input__29ryk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"ContactList_element__1vb1X\",\"button\":\"ContactList_button__11Stj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2uKkB\",\"input\":\"Filter_input__3YgOb\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport s from './ContactForm.module.scss';\n\nconst nameInputId = nanoid();\nconst numberInputId = nanoid();\n\nexport function ContactForm({ addContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const inputHandler = e => {\n    const { value, name } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    addContact({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s['contact-form']} onSubmit={submitHandler}>\n      <label htmlFor={nameInputId} className={s['name-label']}>\n        Name\n      </label>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={inputHandler}\n      />\n      <label htmlFor={numberInputId} className={s['number-label']}>\n        Number\n      </label>\n      <input\n        id={numberInputId}\n        className={s['number-input']}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={inputHandler}\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.scss';\n\nexport function ContactList({ deleteContact, filteredContacts }) {\n  return (\n    <ul>\n      {filteredContacts.map(({ id, name, number }) => {\n        return (\n          <li key={id} className={s.element}>\n            {name}: {number}\n            <button\n              className={s.button}\n              type=\"button\"\n              onClick={() => deleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport s from './Filter.module.scss';\n\nconst filterId = nanoid();\n\nexport function Filter({ updateFilter, filter }) {\n  const filterHandler = e => {\n    const message = e.target.value;\n    updateFilter(message);\n  };\n\n  return (\n    <>\n      <label className={s.label} htmlFor={filterId}>\n        Find contacts by name\n      </label>\n      <input\n        className={s.input}\n        id={filterId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={filterHandler}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  updateFilter: PropTypes.func.isRequired,\n};\n","import { useState, useEffect, useRef } from 'react';\nimport { ContactForm } from './components/ContactForm';\nimport { ContactList } from './components/ContactList';\nimport { Filter } from './components/Filter';\nimport { nanoid } from 'nanoid';\nimport './common-style.scss';\nimport './App.scss';\n\nfunction App({}) {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    const check = contacts.find(contact => contact.name === name);\n\n    if (check) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    setContacts(prevState => [contact, ...prevState]);\n  };\n\n  const deleteContact = id => {\n    const updatedContacts = contacts.filter(contact => contact.id !== id);\n\n    setContacts([...updatedContacts]);\n  };\n\n  const filterContacts = () => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm addContact={addContact} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} updateFilter={setFilter} />\n      <ContactList\n        filteredContacts={filterContacts()}\n        deleteContact={deleteContact}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}